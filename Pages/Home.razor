@page "/"
@using GameStoreMono.BlazorServer.Dto
@using GameStoreMono.BlazorServer.Services
@using GameStoreMono.BlazorServer.Models
@using System.Collections.ObjectModel
@inject GameService GameService
@inject GameCollectionModel GameCollectionModel
@inject ILogger<GameStoreMono.BlazorServer.Pages.Home> Logger
@implements IDisposable

<PageTitle>Game catalog</PageTitle>

<div class="game-table-container">
    <h1 class="game-table-title">Game Catalog</h1>
    
    <div class="game-table-wrapper">
        <table class="game-table">
            <thead class="game-table-header">
                <tr>
                    <th class="game-table-header-cell--first">ID</th>
                    <th class="game-table-header-cell--regular">Name</th>
                    <th class="game-table-header-cell--regular">Genre</th>
                    <th class="game-table-header-cell--regular">Price</th>
                    <th class="game-table-header-cell--regular">Release Date</th>
                    <th class="game-table-header-cell--last">
                        <span class="sr-only">Actions</span>
                    </th>
                </tr>
            </thead>
            <tbody class="game-table-body">
                @if (GameCollectionModel.Games.Count == 0)
                {
                    <tr>
                        <td colspan="6" class="game-empty-state">
                            @if (_isLoading)
                            {
                                <text>Loading games...</text>
                            }
                            else
                            {
                                <text>No games available.</text>
                            }
                        </td>
                    </tr>
                }
                @foreach (var game in GameCollectionModel.Games)
                {
                    <tr class="game-table-row">
                        <td class="game-table-cell--first">
                            @game.Id.ToString("N")[..8]...
                        </td>
                        <td class="game-table-cell--regular game-name">
                            @game.Name
                        </td>
                        <td class="game-table-cell--regular">
                            <span class="game-genre-badge">
                                @game.Genre
                            </span>
                        </td>
                        <td class="game-table-cell--regular game-price">
                            @game.Price.ToString("C")
                        </td>
                        <td class="game-table-cell--regular game-date">
                            @game.ReleaseDate.ToString("MMM dd, yyyy")
                        </td>
                        <td class="game-table-cell--last">
                            <button class="game-action-edit" @onclick="() => EditGame(game.Id)">
                                Edit
                            </button>
                            <button class="game-action-delete" @onclick="() => DeleteGame(game.Id)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    @if (GameCollectionModel.LastUpdateTime.HasValue)
    {
        <div class="mt-4 text-sm text-gray-500">
            Last update: @GameCollectionModel.LastUpdateTime.Value.ToString("HH:mm:ss")
        </div>
    }
</div>

@code {
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to property change events
        GameCollectionModel.PropertyChanged += OnGameCollectionChanged;
        
        // Load initial data
        await LoadGames();
    }

    private async Task LoadGames()
    {
        try
        {
            _isLoading = true;
            var games = await GameService.GetGamesAsync();
            
            // Update the shared game collection model
            GameCollectionModel.UpdateGames(games);
            Logger.LogInformation("Successfully loaded {Count} games", games.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading games");
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnGameCollectionChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        // This method will be called when the background service updates the model
        await InvokeAsync(StateHasChanged);
    }

    private void EditGame(Guid id)
    {
        Logger.LogInformation("Edit game: {GameId}", id);
        // TODO: Implement edit functionality
    }

    private async Task DeleteGame(Guid id)
    {
        try
        {
            var success = await GameService.DeleteGameAsync(id);
            if (success)
            {
                // Remove from the shared model
                var gameToRemove = GameCollectionModel.Games.FirstOrDefault(g => g.Id == id);
                if (gameToRemove != null)
                {
                    GameCollectionModel.Games.Remove(gameToRemove);
                }
                Logger.LogInformation("Successfully deleted game {GameId}", id);
            }
            else
            {
                Logger.LogWarning("Failed to delete game {GameId}", id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting game {GameId}", id);
        }
    }

    public void Dispose()
    {
        // Unsubscribe from property change events to prevent memory leaks
        GameCollectionModel.PropertyChanged -= OnGameCollectionChanged;
    }
}