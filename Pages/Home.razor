@page "/"
@using GameStoreMono.BlazorServer.Dto
@using GameStoreMono.BlazorServer.Services
@using GameStoreMono.BlazorServer.Models
@using System.Collections.ObjectModel
@inject GameService GameService
@inject GameCollectionModel GameCollectionModel
@inject ILogger<GameStoreMono.BlazorServer.Pages.Home> Logger
@implements IDisposable

<PageTitle>Game catalog</PageTitle>

<div class="game-table-container">
    <div class="game-header">
        <h1 class="game-table-title">Game Catalog</h1>
        <button class="btn-add-game" @onclick="ShowAddGameModal">
            <span class="add-icon">+</span>
            Add New Game
        </button>
    </div>
    
    <div class="game-table-wrapper">
        <table class="game-table">
            <thead class="game-table-header">
                <tr>
                    <th class="game-table-header-cell--first">ID</th>
                    <th class="game-table-header-cell--regular">Name</th>
                    <th class="game-table-header-cell--regular">Genre</th>
                    <th class="game-table-header-cell--regular">Price</th>
                    <th class="game-table-header-cell--regular">Release Date</th>
                    <th class="game-table-header-cell--last">
                        <span class="sr-only">Actions</span>
                    </th>
                </tr>
            </thead>
            <tbody class="game-table-body">
                @if (GameCollectionModel.Games.Count == 0)
                {
                    <tr>
                        <td colspan="6" class="game-empty-state">
                            @if (_isLoading)
                            {
                                <text>Loading games...</text>
                            }
                            else
                            {
                                <text>No games available.</text>
                            }
                        </td>
                    </tr>
                }
                @foreach (var game in GameCollectionModel.Games)
                {
                    <tr class="game-table-row">
                        <td class="game-table-cell--first">
                            @game.Id.ToString("N")[..8]...
                        </td>
                        <td class="game-table-cell--regular game-name">
                            @game.Name
                        </td>
                        <td class="game-table-cell--regular">
                            <span class="game-genre-badge">
                                @game.Genre
                            </span>
                        </td>
                        <td class="game-table-cell--regular game-price">
                            @game.Price.ToString("C")
                        </td>
                        <td class="game-table-cell--regular game-date">
                            @game.ReleaseDate.ToString("MMM dd, yyyy")
                        </td>
                        <td class="game-table-cell--last">
                            <button class="game-action-edit" @onclick="() => EditGame(game.Id)">
                                Edit
                            </button>
                            <button class="game-action-delete" @onclick="() => DeleteGame(game.Id)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    @if (GameCollectionModel.LastUpdateTime.HasValue)
    {
        <div class="mt-4 text-sm text-gray-500">
            Last update: @GameCollectionModel.LastUpdateTime.Value.ToString("HH:mm:ss")
        </div>
    }
</div>

<!-- Add Game Modal -->
@if (_showAddModal)
{
    <div class="modal-overlay" @onclick="HideAddGameModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2>Add New Game</h2>
                <button class="modal-close" @onclick="HideAddGameModal">&times;</button>
            </div>
            
            <EditForm Model="_newGame" OnValidSubmit="HandleValidSubmit" class="modal-body">
                <DataAnnotationsValidator />
                <ValidationSummary class="validation-summary" />
                
                <div class="form-group">
                    <label for="gameName">Game Name *</label>
                    <InputText id="gameName" @bind-Value="_newGame.Name" class="form-input" />
                    <ValidationMessage For="@(() => _newGame.Name)" class="validation-message" />
                </div>
                
                <div class="form-group">
                    <label for="gameGenre">Genre *</label>
                    <InputSelect id="gameGenre" @bind-Value="_newGame.GenreId" class="form-input">
                        <option value="">Select a genre...</option>
                        @foreach (var genre in _genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => _newGame.GenreId)" class="validation-message" />
                </div>
                
                <div class="form-group">
                    <label for="gamePrice">Price ($) *</label>
                    <InputNumber id="gamePrice" @bind-Value="_newGame.Price" class="form-input" step="0.01" />
                    <ValidationMessage For="@(() => _newGame.Price)" class="validation-message" />
                </div>
                
                <div class="form-group">
                    <label for="gameReleaseDate">Release Date *</label>
                    <InputDate id="gameReleaseDate" @bind-Value="_releaseDateHelper" class="form-input" />
                    <ValidationMessage For="@(() => _newGame.ReleaseDate)" class="validation-message" />
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn-cancel" @onclick="HideAddGameModal" disabled="@_isSubmitting">
                        Cancel
                    </button>
                    <button type="submit" class="btn-submit" disabled="@_isSubmitting">
                        @if (_isSubmitting)
                        {
                            <span class="loading-spinner"></span>
                            <text>Adding...</text>
                        }
                        else
                        {
                            <text>Add Game</text>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private bool _isLoading = true;
    private bool _showAddModal = false;
    private bool _isSubmitting = false;
    private CreateGameDto _newGame = new();
    private List<GenreDto> _genres = [];
    
    // Helper for DateOnly binding (InputDate works with DateTime)
    private DateTime _releaseDateHelper = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to property change events
        GameCollectionModel.PropertyChanged += OnGameCollectionChanged;
        
        // Load initial data
        await LoadGames();
        await LoadGenres();
    }

    private async Task LoadGames()
    {
        try
        {
            _isLoading = true;
            var games = await GameService.GetGamesAsync();
            
            // Update the shared game collection model
            GameCollectionModel.UpdateGames(games);
            Logger.LogInformation("Successfully loaded {Count} games", games.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading games");
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadGenres()
    {
        try
        {
            // For now, we'll use the seeded genres. You can create a GenreService later
            _genres = new List<GenreDto>
            {
                new(1, "Action"),
                new(2, "Adventure"),
                new(3, "Role-Playing")
            };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading genres");
        }
    }

    private async void OnGameCollectionChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        // This method will be called when the background service updates the model
        await InvokeAsync(StateHasChanged);
    }

    private void ShowAddGameModal()
    {
        _newGame = new CreateGameDto();
        _releaseDateHelper = DateTime.Today;
        _showAddModal = true;
    }

    private void HideAddGameModal()
    {
        _showAddModal = false;
        _newGame = new CreateGameDto();
        _releaseDateHelper = DateTime.Today;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            _isSubmitting = true;
            
            // Update the CreateGameDto with the DateOnly from DateTime helper
            var gameToCreate = new CreateGameDto(
                _newGame.Name,
                _newGame.GenreId,
                _newGame.Price,
                DateOnly.FromDateTime(_releaseDateHelper)
            );

            var createdGame = await GameService.CreateGameAsync(gameToCreate);
            
            if (createdGame != null)
            {
                Logger.LogInformation("Successfully created game: {GameName}", gameToCreate.Name);
                
                // Refresh the games list to show the new game
                await LoadGames();
                
                HideAddGameModal();
            }
            else
            {
                Logger.LogWarning("Failed to create game: {GameName}", gameToCreate.Name);
                // You could show an error message to the user here
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating game");
            // You could show an error message to the user here
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void EditGame(Guid id)
    {
        Logger.LogInformation("Edit game: {GameId}", id);
        // TODO: Implement edit functionality (similar modal)
    }

    private async Task DeleteGame(Guid id)
    {
        try
        {
            var success = await GameService.DeleteGameAsync(id);
            if (success)
            {
                // Remove from the shared model
                var gameToRemove = GameCollectionModel.Games.FirstOrDefault(g => g.Id == id);
                if (gameToRemove != null)
                {
                    GameCollectionModel.Games.Remove(gameToRemove);
                }
                Logger.LogInformation("Successfully deleted game {GameId}", id);
            }
            else
            {
                Logger.LogWarning("Failed to delete game {GameId}", id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting game {GameId}", id);
        }
    }

    public void Dispose()
    {
        // Unsubscribe from property change events to prevent memory leaks
        GameCollectionModel.PropertyChanged -= OnGameCollectionChanged;
    }
}